# -*- coding: utf-8 -*-
"""APUS by Pyxis.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1zKXKScOHONldi73FpyCqjR6z4BAxACun
"""

# Commented out IPython magic to ensure Python compatibility.
# %pip install gradio
# %pip install requests

import requests
import gradio as gr

global api_key
api_key = "API_KEY" #temporary key 1

global url
url = 'https://api-server02.webraft.in/v1/chat/completions'

def response(prompt ,api_key="API KEY", url='https://api-server02.webraft.in/v1/chat/completions', instructions='', max_tokens= 5000, systemprompt = 'you are an education assistant, master of topics and a brilliants teacher who knows how to explains topics .', model="gpt-4o"):
  headers = {
      'Authorization': f'Bearer {api_key}',
      'Content-Type': 'application/json'
  }

  data = {
      "model": model,
      "max_tokens": int(max_tokens),
      "messages": [
          {
              "role": "system",
              "content": str(systemprompt)
          },
          {
              "role": "user",
              "content": f"{instructions} -{str(prompt)}"
          }
      ]
  }
  response = requests.post(url, headers=headers, json=data)
  try:
      response_data = response.json()
      print(response_data)
      return response_data['choices'][0]['message']['content']
  except requests.exceptions.JSONDecodeError as e:
      print("JSON Decode Error:", e)
      print("Response Content:", response.content)
      return f"JSON Decode Error: {e}"

#---


def chat(prompt, history):
  history=''
  normalchatresponse = response(
    prompt,
    api_key,
    url,
    max_tokens=16000,
    systemprompt= "you are an education assistant, master of topics and a brilliants teacher who knows how to explains topics , you are helping out learners in their learning process and also healping students in dealing with dealines,studies, tackling doubts and increasing their knowledge in various topics while guiding them throughout learning process with help of notes lessons experiences and examples." #you dont waste time by putting unnessesary things when not required
    )
  return normalchatresponse

#notes summary mindmap
def nsm(prompt, history):
  history=''
  notessumamryresponse = response(
      prompt,
      api_key,
      url,
      max_tokens=16000,
      instructions="",
      systemprompt= "you are an education assistant, master of topics and a brilliants teacher who knows how to explains topics. you are provided with text or topics or both , you have to provide summary short important notes for better and deeper understanding of the text."
      )

  mindmapresponse = response(
      prompt,
      api_key,
      url,
      max_tokens=16000,
      instructions="from the given Text Generate Mindmap for this text",
      systemprompt= "you are an education assistant, master of topics and a brilliants teacher who knows how to explains topics. You are also an expert in structuring information into mind maps. Output a list of mind map nodes as parent -> child relationships. Use clear concepts and categories make it such that it an be rendered with ease also make sure that only give the mindmap no other text."
      )
  return notessumamryresponse , mindmapresponse
#Question marker/maker
def question(prompt, history):
  history=''
  qmarkerresponse = response(
      prompt,
      api_key,
      url,
      max_tokens=16000,
      instructions="frame important questions with crucial marking of importance to prepare learners on topic ", #while also helping them gain deep knowledge and understaning of the topic
      systemprompt= "you are an education assistant, master of topics and a brilliants teacher who knows how to explains topics, you are giving different forms question based on a The topic and text given to you , to test learners and help them practice while also helping them gain deep knowledge and better understaning of the topic . if text is given to you make sure that the answer to the questions does not lie out side the text. if asked to to include question out of the content then give questions from out side text to imporve their understanding more and helping them to learn new things about the topic also mark the question which need outside contect to answer ."
      )
  return qmarkerresponse

#Qualitative assesment and feedback
def qassesment(prompt, history):
  history=''
  qassesmentresponse = response(
      prompt,
      api_key,
      url,
      max_tokens=16000,
      instructions="here are Questions and answers , analyse the key mistakes and lacking points to for betterment if the mistakes exist and also give a comprehensive overview of all mistakes and weak topics to work on and also How they can be imporved also tell if somthing is missing that should have been added to the answer. Provide it in a format which is easily understand use visual method for easy interpretations . also have small summary at the end with only relevent content and short brief explaination of the things to be done to imporve week areas and topics things that are currnetly good",
      systemprompt= "you are an education assistant, master of topics and a brilliants teacher who knows how to explains topics and provides qualitative analysis and feedback to learners based on their anwers for the questions giving a comprehensive overview that helps in betterment of the concept.you are with questions answers by the learner check if the answer are correct and accurate according to the questions also tell the topics in which the learner lags and how can they imporve their understanding of the portion of the topics and key places to focus on." # they can also provide text to check if their answers come from the text you tell what can they add if any things is missing or is required how can they imporve if any things is left or is reuired
      )
  return qassesmentresponse

#Keywords , important lines and segments
def keywls(prompt, history):
  history=''
  keywlsresponse = response(
      prompt,
      api_key,
      url,
      max_tokens=16000,
      instructions="find important keywords and lines in the text provided also give a breif about the keywords from the text and out of text also if anything regarging the keyword is not mentioned in the text metion that their is noting regarding the word in thext and the description is from outside the context . give a short description on keywords in a seperate section.",
      systemprompt= "you are an education assistant, master of topics and a brilliants teacher who knows how to explains topics.you are provided with a text from which you have to find keywords keylines  important portion of text necessary to get a good stand over the topic also proivde the information in such a way that the learner with no prior experience can also understand the topic of the text and get a good understanding over it.seperate out the sections for keywords keylines and important segemts so it is easy for learner to understand .you also explain about the keywords in a simple short way from the text and also include information about it form outside the text also if nothing is mentioned regarging the keyword also inform the user about the same .list everthing in different section and in case of keywords list key words in on section and description in another.you also give a very short summary of the text at the end . use visual if thier are related to the topic " #visuals addition ?
      )
  return keywlsresponse

# Summary and long Explaintion
def explain(prompt, history):
  history=''
  explainresponse = response(
      prompt,
      api_key,
      url,
      max_tokens=16000,
      instructions= "This is the text explain the topic and the text and also-",
      systemprompt= "you are an education assistant, master of topics and a brilliants teacher who knows how to explains topics , you are helping out learners in their learning process . you are explaining topic or text given to the learner by the help of things such making it easliy understandable . you are giving summary and overview if asked for." #you dont waste time by putting unnessesary things when not required
      )
  return explainresponse

"""

---

"""

def apikey(apikey):
  global api_key
  api_key = apikey
  return "connected"
user = "/content/userlogo.png"
apus = "/content/Apus_Logo_withoutname.png"

with gr.Blocks(theme=gr.themes.Soft(), title="APUS by Pyxis") as app:
  gr.Markdown("APUS")
  gr.Markdown("AI Education application build by Pyxis")
  gr.Markdown("---")
  with gr.Tabs():
    with gr.TabItem("Api"):
      gr.Interface(
          fn=apikey,
          inputs= gr.Textbox(placeholder="Enter Api Key",type = "password",container=False),
          outputs=gr.Textbox(placeholder="API Not Connected",interactive=False ,container=False),
          flagging_mode='never'
      )
  with gr.Tabs():
    with gr.TabItem("Chat"):
      gr.ChatInterface(
          fn=chat,
          textbox = gr.Textbox(
              placeholder="""Welcome Learner ,
Which topic do you want me make Questions on for better understanding and testing your knowledge ? """,
              submit_btn = True,
              stop_btn = True),
          chatbot = gr.Chatbot(
              height=369,
              type='messages',
              show_copy_all_button=True,
              show_copy_button= True,
              show_share_button=True,
              container=False,
              scale=1,
              layout= 'bubble',
              avatar_images = [user,apus],
              bubble_full_width=True
              ),#watermark="Pyxis",#feedback_options=["Prefect", "Good", "Fine", "Working","Not working", "Bad"],
          examples=["explain a topic for better understanding", "clear doubts" , "how can you help me in learning?"],
          title = "Chat!",
          description = "chat and learn something new or clear all doubts regarding topics and also get answers to queries related to exams and learning!"
          )

    with gr.TabItem("Explaination"):
      gr.ChatInterface(
          fn=explain,
          textbox = gr.Textbox(
              placeholder="Welcome Learner, What do you want to get explanation , summary , overview or anything else ",
              submit_btn = True,
              stop_btn = True),
          chatbot = gr.Chatbot(
              height=369,
              type='messages',
              show_copy_all_button=True,
              show_copy_button= True,
              show_share_button=True,
              container=False,
              scale=1,
              layout= 'bubble',
              avatar_images = [user,apus],
              bubble_full_width=True
              ),#watermark="Pyxis",#feedback_options=["Prefect", "Good", "Fine", "Working","Not working", "Bad"],
          examples=["explain a topic", "give summary for quick overview " , "prepare notes"],
          title = "Explain and more..",
          description = "get notes, overview and full explainations for all your difficult topics"
          )

    with gr.TabItem("Grasp it"):
      gr.ChatInterface(
          fn=nsm,
          textbox = gr.Textbox(
              placeholder="Welcome Learner, I am here to create summary , short notes or mindmaps for better understaning and easy revision",
              submit_btn = True,
              stop_btn = True),
          chatbot = gr.Chatbot(
              height=369,
              type='messages',
              show_copy_all_button=True,
              show_copy_button= True,
              show_share_button=True,
              container=False,
              scale=1,
              layout= 'bubble',
              avatar_images = [user,apus],
              bubble_full_width=True
              ),#watermark="Pyxis",#feedback_options=["Prefect", "Good", "Fine", "Working","Not working", "Bad"],
          examples=["prepare formula sheet", "10 mins quick revision notes" , "give elaborative pointers and mindmap"],
          title = "Quick help",
          description = "get summaries, notes or mindmaps for last minute cramming and revision"
          )
    with gr.TabItem("Clear The Clutter"):
      gr.ChatInterface(
          fn=keywls,
          textbox = gr.Textbox(
              placeholder="""Please provide the text, answer, or explanation you want to be analyze
and highlight the most important keywords, critical lines
and key segments from the text to be remembered, revised or on which more focus should be paid.
""",
              submit_btn = True,
              stop_btn = True),
          chatbot = gr.Chatbot(
              height=369,
              type='messages',
              show_copy_all_button=True,
              show_copy_button= True,
              show_share_button=True,
              container=False,
              scale=1,
              layout= 'bubble',
              avatar_images = [user,apus],
              bubble_full_width=True
              ),#watermark="Pyxis",#feedback_options=["Prefect", "Good", "Fine", "Working","Not working", "Bad"],
          examples=["highlight important points", "give key words in the text" , "give important text to remenber"],
          title = "Important points and more..",
          description = "get quick help with important pointers to remember and keywords to use"
          )

    with gr.TabItem("Questions"):
      gr.ChatInterface(
          fn=question,
          textbox = gr.Textbox(
              placeholder="""Welcome Learner ,
Which topic do you want me make Questions on for better understanding and testing your knowledge ? """,
              submit_btn = True,
              stop_btn = True),
          chatbot = gr.Chatbot(
              height=369,
              type='messages',
              show_copy_all_button=True,
              show_copy_button= True,
              show_share_button=True,
              container=False,
              scale=1,
              layout= 'bubble',
              avatar_images = [user,apus],
              bubble_full_width=True
              ),#watermark="Pyxis",#feedback_options=["Prefect", "Good", "Fine", "Working","Not working", "Bad"],
          examples=["prepare short questions","prepare competitive mcqs" , "prepare long answerquestions"],
          title = "Quiz yourself!",
          description = "Prepare with all kinds of questions on a topic to check your hold on the topic and master it!!"
          )
    with gr.TabItem("Qualitative Analysis"):
      gr.ChatInterface(
          fn=qassesment,
          textbox = gr.Textbox(
              placeholder="""Please enter the questions and your answers for review.
You can follow this format:
Q1: [Question]
A1: [Answer].
You can also add a reference text""",
              submit_btn = True,
              stop_btn = True),
          chatbot = gr.Chatbot(
              height=369,
              type='messages',
              show_copy_all_button=True,
              show_copy_button= True,
              show_share_button=True,
              container=False,
              scale=1,
              layout= 'bubble',
              avatar_images = [user,apus],
              bubble_full_width=True
              ),#watermark="Pyxis",#feedback_options=["Prefect", "Good", "Fine", "Working","Not working", "Bad"],
          examples=["give analysis", "tell all the weak points" , "suggest weak points"],
          title = "Qualitative analysis",
          description = "gets total qualitative analysis of test results and sharpen particular topics"
          )

#Uncomment this code if required, it stops the running gradio apps
#gr.close_all() # closes all gradio applications
#app.close() # closes instance of applicaiton started as app
app.launch(share=True,debug=True, favicon_path='/content/Apus_Logo_name.png')
